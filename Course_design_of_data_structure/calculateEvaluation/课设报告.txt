九、算术表达式求值 (选做) （栈）
1.[问题描述]
　　一个算术表达式是由操作数(operand)、运算符(operator)和界限符(delimiter)组成的。假设操作数是正实数，运算符只含加减
乘除等四种运算符，界限符有左右括号和表达式起始、结束符“#”，如：#6+15*（21-8/4）#。引入表达式起始、结束符是为了方便。
编程利用“运算符优先法”求算术表达式的值。
[基本要求]
（1） 从键盘或文件读入一个合法的算术表达式，输出正确的结果。
（2） 显示输入序列和栈的变化过程。
（3） 考虑算法的健壮性，当表达式错误时，要给出错误原因的提示。
（4） 实现非整数的处理。
2.采用的数据结构

stack<char>Ch;//存储操作符 
stack<float>Num;//存储操作数 
class P{
	public:
	int flag;//记录当前为操作数还是操作符，0--数，1--符 
	float num;//0
	char c;//1
};
P p[MAX_LENGTH];//存储表达式 

3.算法思想

表达式存储的思想：
首先将表达式读入到一个字符串中，然后从前往后依次判断并存储。若当前字符为操作符，设flag为1，存储。 若为操作数，则将字符串该位置往后映射，隔离出前面为float的部分。通过sscanf(&s[i],"%f%s",&t,k);实现。该函数在此处的功能就是将字符串前面的float格式的内容存入t，字符串剩余部分存入k。设flag为0，存入该数t。然后将k在拷贝到s中，再次从前往后遍历。
遍历结束后，操作数和操作符分离，通过flag区分。

求值思想：
利用常规思想，依次读取数组中的元素，不断进行入栈出栈运算，最终得出表达式的值。

实现的出错检测：
非法字符介入，表达式开头出现运算符，除数不能为零，括号不匹配，小数点位置非法，

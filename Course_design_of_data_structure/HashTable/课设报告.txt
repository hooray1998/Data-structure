七、Hash表应用 （选做） （查找）
1.[问题描述]
设计散列表实现VIP客户发掘。对身份证号进行Hash, 通过对乘客某时间段内的乘机频率、里程数统计，发掘VIP客户。 
[基本要求]
（1） 设每个记录有下列数据项：身份证号码（虚构，位数和编码规则与真实一致即可）、姓名、航班号、航班日期、里程。 
（2） 从文件输入各记录，以身份证号码为关键字建立散列表。 
（3） 分别采用开放定址（自行选择和设计定址方案）和链地址两种方案解决冲突；显示发生冲突的次数、每次中解决冲突进行重定位的次数。
（4）记录条数至少在100条以上。
（5） 从记录中实现乘客乘机频率、里程数统计，从而发掘VIP客户。


2．采用的数据结构 

class record{//存数文件中单个记录 
	public:
	string id;
	string name;
	string flightNum;//航班号
	int mon; 
	int day;
	int route;//航程
};
class people{//存储每个人的总统计信息 
	public:
		string id;
		string name;
		int flytime;//飞行次数
		int sum_route;
		people* next;		
};

3．算法思想：

开放定址储存：
通过to_ascii()函数将身份证的前六位与后四位的ascii码累加，取余 得出储存的地址，若该单元已经存在元素，判断是否为该乘客，若为该乘客，update该位置的飞行数据，否则通过二次线性再散列找出下一个位置，循环进行此判断，直到发现该乘客或空位。

开放定址查找：
	将要查找的元素通过to_ascii()函数得出地址，判断当前位置上的元素是否有元素。若无，则查找失败，若有，判断id与其相等，若不等，循环二次线性再散列，直到找到该元素，否则查找失败。

链地址法存储：
建立一个hash指针表，通过to_ascii()函数得出hash地址，判断当前位置下有无乘客信息，若无，则添加，若有，循环判断是否为该乘客，直到找到该乘客或指针为NULL。

链地址法查找：
通过待查找的id通过to_ascii()函数得出的地址循环比较，若找到该乘客的信息则输出，指针为NULL则查找失败。
